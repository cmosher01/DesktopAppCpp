cmake_minimum_required(VERSION 3.22.1)

set(CMAKE_VERBOSE_MAKEFILE TRUE CACHE BOOL "Echo make commands.")

set(CMAKE_BUILD_TYPE RelWithDebInfo)
set(CMAKE_FIND_PACKAGE_PREFER_CONFIG TRUE)





macro(pv v)
    message(STATUS "${v}=${${v}}")
endmacro()



project(
    foobar
        VERSION 0.0.1
        DESCRIPTION "A desktop application example"
        HOMEPAGE_URL https://github.com/cmosher01/DesktopAppCpp
        LANGUAGES CXX)





pv(CMAKE_SOURCE_DIR)
pv(CMAKE_BINARY_DIR)

pv(PROJECT_SOURCE_DIR)
pv(PROJECT_BINARY_DIR)

file(TO_CMAKE_PATH "${PROJECT_BINARY_DIR}/CMakeLists.txt" LOC_PATH)
if(EXISTS "${LOC_PATH}")
    message(FATAL_ERROR "You cannot build in a source directory; make a build subdirectory.")
endif()



if(WIN32)
    set(CMAKE_INSTALL_PREFIX "C:/Program Files/${PROJECT_NAME}")
    unset(CPACK_PACKAGING_INSTALL_PREFIX)
elseif(APPLE)
    unset(CMAKE_INSTALL_PREFIX)
    unset(CPACK_PACKAGING_INSTALL_PREFIX)
else()
    set(CMAKE_INSTALL_PREFIX "/opt/${PROJECT_NAME}")
    set(CPACK_PACKAGING_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
endif()

include(GNUInstallDirs)

set(CMAKE_PREFIX_PATH "${CMAKE_SOURCE_DIR}")
include_directories(BEFORE "${CMAKE_SOURCE_DIR}/include")



pv(CMAKE_GENERATOR)
pv(CMAKE_GENERATOR_PLATFORM)
pv(CMAKE_SIZEOF_VOID_P)

pv(CMAKE_SYSTEM)
pv(CMAKE_SYSTEM_NAME)

pv(CPACK_PACKAGING_INSTALL_PREFIX)
pv(CMAKE_INSTALL_PREFIX)

pv(CMAKE_INSTALL_BINDIR)
pv(CMAKE_INSTALL_FULL_BINDIR)
pv(CMAKE_INSTALL_LIBDIR)
pv(CMAKE_INSTALL_SYSCONFDIR)
pv(CMAKE_INSTALL_FULL_SYSCONFDIR)

pv(CMAKE_SYSTEM_PREFIX_PATH)
pv(CMAKE_SYSTEM_PROGRAM_PATH)
pv(CMAKE_SYSTEM_LIBRARY_PATH)
pv(CMAKE_SYSTEM_INCLUDE_PATH)

pv(CMAKE_PREFIX_PATH)
pv(CMAKE_PROGRAM_PATH)
pv(CMAKE_LIBRARY_PATH)
pv(CMAKE_INCLUDE_PATH)



add_subdirectory(src)



set(PROJECT_FOURCC epl2)
set(CPACK_PACKAGE_VENDOR "nu.mine.mosher")
set(CPACK_PACKAGE_CONTACT "cmosher01@gmail.com")


set(CPACK_GENERATOR ZIP TGZ 7Z)
if(WIN32)
    set(CPACK_GENERATOR ${CPACK_GENERATOR} NSIS)
elseif(APPLE)
    set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION}-macOS")
    configure_file(${PROJECT_SOURCE_DIR}/Info.plist.in ${PROJECT_BINARY_DIR}/Info.plist)
    set(CPACK_GENERATOR ${CPACK_GENERATOR} DragNDrop)
else()
    set(CPACK_DEBIAN_PACKAGE_DEPENDS "libboost-dev, libwxgtk3.0-gtk3-0v5")
    set(CPACK_GENERATOR ${CPACK_GENERATOR} DEB)
endif()

include(CPack)
